{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/wfairhead/Documents/ownership/React/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from 'react-redux';\nimport { createStream } from \"../../actions\";\nimport { Link } from 'react-router-dom';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderTextInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ui header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    // console.log(this.props)\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        label: \"Enter Title\",\n        component: this.renderTextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        label: \"Enter Description\",\n        component: this.renderTextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"button ui primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        class: \"button ui dark\",\n        style: {\n          float: left\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    // only if the user did not enter a title\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    // only if the user did not enter a description\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/wfairhead/Documents/ownership/React/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","Link","StreamCreate","Component","renderTextInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","float","left","validate","errors","title","description","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Field, reduxForm} from \"redux-form\";\nimport {connect} from 'react-redux'\nimport {createStream} from \"../../actions\";\nimport {Link} from 'react-router-dom'\nclass StreamCreate extends React.Component {\n\n    renderError({error, touched}) {\n        if (touched && error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"ui header\">\n                        {error}\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    renderTextInput = ({input, label, meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\n        return  (\n            <div className={className}>\n                <label>{label}</label>\n                <input {...input} autoComplete=\"off\"/>\n                {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    onSubmit = (formValues) => {\n        this.props.createStream(formValues)\n    }\n\n    render() {\n        // console.log(this.props)\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n\n                <Field name=\"title\" label=\"Enter Title\" component={this.renderTextInput}/>\n                <Field name=\"description\" label=\"Enter Description\" component={this.renderTextInput}/>\n\n                <button type=\"submit\" className=\"button ui primary\">\n                    Submit\n                </button>\n                <Link to=\"/\" class=\"button ui dark\" style={{ float:left}}>Back</Link>\n                {/*<button type=\"button\" onClick={reset}>*/}\n                {/*    Clear Values*/}\n                {/*</button>*/}\n\n            </form>\n        )\n    }\n}\n\nconst validate = formValues => {\n    const errors = {};\n\n    if (!formValues.title) {\n        // only if the user did not enter a title\n        errors.title = 'You must enter a title'\n    }\n\n    if (!formValues.description) {\n        // only if the user did not enter a description\n        errors.description = 'You must enter a description'\n    }\n\n    return errors;\n}\n\nconst formWrapped = reduxForm({\n    form: 'streamCreate',\n    validate: validate\n})(StreamCreate)\n\nexport default connect(null, {createStream})(formWrapped)\n"]},"metadata":{},"sourceType":"module"}